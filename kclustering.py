# -*- coding: utf-8 -*-
"""Kclustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s2zhoOFxmO01zK1QCOZWdL4rr3vC23fq
"""

from google.colab import files
uploaded = files.upload()


import io
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt


filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))


df['Price'] = df['Price'].replace('[\$,]', '', regex=True)
df['Mileage'] = df['Mileage'].replace(',', '', regex=True)


df['Price'] = pd.to_numeric(df['Price'], errors='coerce')
df['Mileage'] = pd.to_numeric(df['Mileage'], errors='coerce')


cluster_features = [
    'Price', 'Mileage',
    'ComfortRating', 'InteriorDesignRating', 'PerformanceRating',
    'ValueForMoneyRating', 'ExteriorStylingRating', 'ReliabilityRating',
    'ConsumerRating', 'SellerRating'
]


df_cluster = df.dropna(subset=cluster_features + ['DealType']).copy()


scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_cluster[cluster_features])


kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)
df_cluster['KMeansCluster'] = kmeans.fit_predict(X_scaled)


def is_category_A(row):
    return (
        row['ConsumerRating'] > 4 and
        row['SellerRating'] > 4 and
        row['DealType'] in ['Good', 'Great'] and
        row['InteriorDesignRating'] >= 4.4 and
        row['ComfortRating'] >= 4.4 and
        row['PerformanceRating'] >= 4.5 and
        row['ValueForMoneyRating'] >= 4.5 and
        row['ExteriorStylingRating'] >= 4.5 and
        row['ReliabilityRating'] >= 4.4
    )

df_cluster['LuxuryLabel'] = df_cluster.apply(lambda row: 'A' if is_category_A(row) else 'B', axis=1)


ct = pd.crosstab(df_cluster['KMeansCluster'], df_cluster['LuxuryLabel'])
print("ðŸŸ° KMeans Clustering vs Human-defined Category A/B:")
print(ct)


sns.pairplot(
    df_cluster,
    vars=['Price', 'Mileage', 'ComfortRating', 'PerformanceRating'],
    hue='KMeansCluster',
    palette='Set2'
)
plt.show()