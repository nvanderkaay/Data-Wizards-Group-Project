# -*- coding: utf-8 -*-
"""BlindLuxury.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zHwXhF33cDL3U2ljnGC6_fhOnylCcKCx
"""

from google.colab import files
uploaded = files.upload()

import io
filename = list(uploaded.keys())[0]
print("Uploaded file:", filename)

df = pd.read_csv(io.BytesIO(uploaded[filename]))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt




required_columns = [
    'ConsumerRating', 'SellerRating', 'DealType',
    'InteriorDesignRating', 'ComfortRating', 'PerformanceRating',
    'ValueForMoneyRating', 'ExteriorStylingRating', 'ReliabilityRating'
]
df = df.dropna(subset=required_columns)


def is_category_A(row):
    return (
        row['ConsumerRating'] > 4 and
        row['SellerRating'] > 4 and
        row['DealType'] in ['Good', 'Great'] and
        row['InteriorDesignRating'] >= 4.4 and
        row['ComfortRating'] >= 4.4 and
        row['PerformanceRating'] >= 4.5 and
        row['ValueForMoneyRating'] >= 4.5 and
        row['ExteriorStylingRating'] >= 4.5 and
        row['ReliabilityRating'] >= 4.4
    )


df['LuxuryLabel'] = df.apply(lambda row: 'A' if is_category_A(row) else 'B', axis=1)


features = [
    'ConsumerRating', 'SellerRating', 'DealType',
    'InteriorDesignRating', 'ComfortRating', 'PerformanceRating',
    'ValueForMoneyRating', 'ExteriorStylingRating', 'ReliabilityRating'
]
X = df[features]
y = df['LuxuryLabel']


categorical = ['DealType']
numeric = [col for col in X.columns if col not in categorical]

preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical)
], remainder='passthrough')


pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', DecisionTreeClassifier(max_depth=4, random_state=42))
])


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
pipeline.fit(X_train, y_train)


plt.figure(figsize=(20, 10))
plot_tree(
    pipeline.named_steps['classifier'],
    feature_names=pipeline.named_steps['preprocessor'].get_feature_names_out(),
    class_names=['B', 'A'],
    filled=True,
    rounded=True
)
plt.show()


print(df['LuxuryLabel'].value_counts())